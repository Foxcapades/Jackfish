/*
 * MIT License
 *
 * Copyright (c) 2017 Elizabeth Paige Harper
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'jacoco'
apply plugin: 'signing'
apply from: 'config.gradle'

group "${config.organization.slug}.${config.project.group}"
version config.project.version

sourceCompatibility = config.project.jvm
targetCompatibility = config.project.jvm

task wrapper(type: Wrapper) {
  gradleVersion = '3.3'
  distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}

task sourceJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadoc(overwrite: true, type: Javadoc) {
  source = sourceSets.main.allJava
  destinationDir = file("${project.projectDir}/docs/")
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

/*
 * JaCoCo Configuration
 */
jacoco {
  toolVersion = "0.7.8"
  reportsDir = file("${buildDir}/reports/jacoco")
}

jacocoTestReport {
  reports {
    xml.enabled true
    html.enabled false
  }
}

artifacts {
  archives jar
  archives sourceJar
  archives javadocJar
}

signing {
  sign configurations.archives
}

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

javadoc {
  source = sourceSets.main.allJava
}

uploadArchives {

  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      repository( url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/' ) {
        authentication( userName: OSSRH_USERNAME, password: OSSRH_PASSWORD )
      }

//      repository( url: 'https://oss.sonatype.org/content/repositories/snapshots/' ) {
//        authentication( userName: config.credentials.username, password: config.credentials.password )
//      }

      pom.project {
        name "${config.organization.slug}.${config.project.group}:${config.project.name}"
        packaging 'jar'
        description config.project.description
        url config.project.site

        inceptionYear '2017'

        organization {
          name config.organization.title
          url config.organization.site
        }

        issueManagement {
          system 'Issue Tracker'
          url config.project.tracker
        }

        ciManagement {
          system 'Travis CI'
          url "https://travis-ci.org/${config.organization.key}"
        }

        scm {
          connection "scm:git:${config.project.vcs}"
          developerConnection "scm:git:${config.project.vcs}"
          tag 'master'
          url config.project.site
        }

        licenses {
          license {
            name config.license.name
            url config.license.url
            distribution 'repo'
          }
        }

        developers {
          developer {
            id config.developer.user
            name config.developer.name
            email config.developer.email
          }
        }
      }
    }
  }
}